name: Scan for invalid builds

on:
  schedule:
    - cron: "* * * * *"
  workflow_dispatch:

jobs:
  pr6:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: echo "[]" > scanned-tags.json
      - run: echo "[]" > rebuild-tags.json
      - name: Download scanned-tags
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          workflow: scan_images.yaml
          name: pr6
          path: .
      # - name: Initiate tags artifact
      #   uses: actions/upload-artifact@v2
      #   if: failure()
      #   with:
      #     name: scanned-tags
      #     path: scanned-tags.json
      - id: fetch
        run: |
          dockerApiToken="$(curl --silent --get --data-urlencode service=registry.docker.io --data-urlencode scope=repository:fischerscode/flutter:pull https://auth.docker.io/token | jq --raw-output '.token')"
          curl --silent --get -H "Accept: application/json" -H "Authorization: Bearer $dockerApiToken" https://registry-1.docker.io/v2/fischerscode/flutter/tags/list | jq '.tags' > dockerhub-tags.json
          tag=$(jq --argfile s scanned-tags.json --argfile d dockerhub-tags.json -n '$d | map(select(. as $tag | $s | any(. == $tag) | not)) | first')
          echo "::set-output name=tag::$tag"
      - name: setup buildx
        if: steps.fetch.outputs.tag != 'null'
        uses: docker/setup-buildx-action@v2.4.1
        with:
          install: true
      - name: pull image
        if: steps.fetch.outputs.tag != 'null'
        run: docker pull fischerscode/flutter:${{ steps.fetch.outputs.tag }}
      - name: Check if the image is invalid
        if: steps.fetch.outputs.tag != 'null'
        id: invalid
        run: |
          invalid=$(docker run fischerscode/flutter:${{ steps.fetch.outputs.tag }} flutter doctor | jq -sR 'contains("0.0.0-unknown")')
          echo "::set-output name=invalid::$invalid"
      - name: Login to Docker Hub
        if: steps.fetch.outputs.tag != 'null' && steps.invalid.outputs.invalid == 'true'
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        if: steps.fetch.outputs.tag != 'null' && steps.invalid.outputs.invalid == 'true'
        run: |
          docker build \
            -t fischerscode/flutter:${{ steps.fetch.outputs.tag }} \
            --build-arg=flutterVersion=${{ steps.fetch.outputs.tag }} \
            --cache-from=type=registry,ref=fischerscode/flutter-cache:${{ steps.fetch.outputs.tag }} \
            --cache-to=type=registry,ref=fischerscode/flutter-cache:${{ steps.fetch.outputs.tag }},mode=max \
            --push \
            --platform linux/amd64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x \
            .
      - name: Mark image as scanned
        if: steps.fetch.outputs.tag != 'null'
        run: echo $(cat scanned-tags.json | jq '. += [${{ steps.fetch.outputs.tag }}]') > scanned-tags.json
      - name: Mark image as rebuild
        if: steps.fetch.outputs.tag != 'null' && steps.invalid.outputs.invalid == 'true'
        run: echo $(cat rebuild-tags.json | jq '. += [${{ steps.fetch.outputs.tag }}]') > rebuild-tags.json
      - name: Upload tags as artifact
        uses: actions/upload-artifact@v2
        with:
          name: pr6
          path: |
            scanned-tags.json
            rebuild-tags.json
